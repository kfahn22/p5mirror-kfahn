float sdElipsoid( in vec3 pos, vec3 rad )
{
   float k0 = length(pos/rad);  
   float k1 = length(pos/rad/rad);
   return k0*(k0-1.0)/k1;
}


//combine so that they smoothly blend
float smin( in float a, in float b, float k)
{
 float h = max( k - abs(a-b), 0.0); // "spike" function look at grpahtoy
 return min(a,b) - h*h/(k*4.0);
}


float sdGuy( in vec3 pos )
{

 // parabala is normalized to 0,1
   float t = fract(iTime);
   
   
   
   float  y  = 4.0*t*(1.0-t);
   float dy = 4.0*(1.0-2.0*t);  // derivative
   
   vec2 u = normalize(vec2( 1.0, -dy) ); 
   vec2 v = vec2( dy, 1.0);
   
   vec3 cen = vec3(0.0, y, 0.0);
   // allow for stretch
   float sy = 0.5 + 0.5*y;
   float sz =  1.0/sy; // dont want object to lose volume
   vec3 rad = vec3(0.65,0.4*sy,0.05*sz);
   
   vec3 q = pos - cen;
 //  q.xz = vec2( dot(u.q.uz), dot(v,q.yz) );
   float d =  sdElipsoid(q, rad);
   
   vec3 h = q ;
   float d2 = sdElipsoid(h- vec3(0.4,0.05,0.0), vec3(0.15));
   float d3 = sdElipsoid(h- vec3(-0.28,0.02,0.0), vec3(0.2));
   
   return d;
   //return smin(d,d2, 0.55);
}


float map( in vec3 pos )
{
  //float d = length(pos) - 0.25;
  float d1 = sdGuy(pos);
  
  float d2 = pos.y -(-0.75); // ground changing to +0.75 completely changes the shader!!!!!!
  
  return min(d1,d2);
}



// add lighting by calculating gradients
vec3 calcNormal( in vec3 pos )
{
   vec2 e = vec2(0.0001, 0.0);
   return normalize( vec3(map(pos+e.xyy) - map(pos-e.xyy),
                          map(pos+e.yxy) - map(pos-e.yxy),
                          map(pos+e.yyx)- map(pos-e.yyx) ) );
}


float castRay( in vec3 ro, vec3 rd) 
{
 float t = 0.0;
 for ( int i = 0; i < 100; i ++ )
 {
   vec3 pos = ro + t*rd;
   
   float h = map( pos );
   
   if (h<0.001) 
   break;
   t += h;
   if ( t > 20.0 ) break;
 }
 if ( t>20.0) t = -1.0;
 
 return t;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
   // vec2 uv = fragCoord/iResolution.xy;
    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;
    // Time varying pixel color
   
    // add a target for the camera
    vec3 ta = vec3(0.0,0.5,0.0);
    
    float an = 10.0*iMouse.x/iResolution.x; //iTime;
    vec3 ro = ta + vec3(1.5*sin(an),0.0,1.5*cos(an));  // origin of camera (ta moves camera up)
    
   
   
    vec3 ww = normalize( ta - ro); // target minus ray origin
    vec3 uu = normalize( cross(ww,vec3(0,1,0)) );
    vec3 vv = normalize( cross(uu,ww) );
    
    vec3 rd = normalize( p.x*uu +p.y*vv + 1.5*ww );  // lens of camera
  
    vec3 col = vec3(0.4,0.75,1.0) - 0.5*rd.y; // sky with gradient 
    col = mix(col, vec3(0.7,0.75,0.8), exp(-10.0*rd.y) );  // add grey along the horizon by mixing 


// ray marching

   float t = castRay( ro, rd );
   if (t > 0.0 )
  {
      
      vec3 pos = ro + t*rd;
      vec3 nor = calcNormal(pos);
      
      
      vec3 mate = vec3(0.18); // use base color for objects
      
      vec3 sun_dir = normalize(vec3(0.8,0.4,0.2) );
      float sun_dif = clamp( dot(nor,sun_dir),0.0,1.0);
      float sun_sha = step(castRay( pos + nor*0.001, sun_dir ), 0.0); // add shallows; offset to prevent self intersections
      
      float sky_dif = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0);
      float bou_dif = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,-1.0,0.0)), 0.0, 1.0); // add bounce lighting reflecting back; (-) points down
      
      //float dif = 0.5 + clamp(0.5* dot(nor,sun_dir), 1.0, 1.0);  // add key lighting
      
      
      col = mate*vec3(7.0,4.5,3.0)*sun_dif*sun_sha; 
      col += mate*vec3(0.5,0.8,0.9)*sky_dif; // fill light has a value about 1
      col += mate*vec3(0.7,0.5,0.3)*bou_dif; 
   }
   
     col = pow( col, vec3(0.4545) );  // camera correction right from beginning 
    
    // Output to screen
    fragColor = vec4(col,1.0);
}